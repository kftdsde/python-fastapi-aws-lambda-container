# This is a basic workflow to help you get started with Actions

name: Deploy to AWS Lambda - dev version 

permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  #ECS cluster name
  clustername: ecs-csengine-cluster
  #ECS service name used in clustername
  servicename: ecs-csengine-service
  #ECS task name used in servicename
  taskname: ecs-csengine-task
  #ECS container name in taskname
  containername: csengine-container
  #ECR repo name
  ecrreponame: dev-csengine
  #Docker tag
  tag: latest
  #
  
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::923083696216:role/github_actions_role
          aws-region: us-east-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ecrreponame }}
          IMAGE_TAG: ${{ env.tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.aws.lambda .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Serverless AWS Lambda Deploy
        uses: serverless/github-action@v3.1
        with:
          args: -c "cd ./aws-lambda-deploy && serverless deploy --stage dev --region us-east-1 --verbose"
          entrypoint: /bin/sh
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}          
